var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站: https://mdecd2025.github.io/hw-41023137/content/index.html \n 學員作業倉儲: https://github.com/mdecd2025/hw-41023137 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': 'w1：建立個人倉儲網頁及分組 \n w2：228放假 \n w3：於list頁面建立分組名單 \n w4：學習如何建立ssh協定執行作業倉儲的推送 \n 參考頁面： https://mde.tw/cd2025/content/SSH.html \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 https://mde.tw/cd2025/content/IPv6.html \n IPv6 : 2001:288:6004:17:fff1:cd25:0000:a006 gateway: 2001:288:6004:17::254 dns server: 2001:288:6004:17::3 \n 設定完ssh之後到控制台的網路和共用中心的乙太網路內容中的ipv6進行如上修改， \n 然後再把倉儲中的init.py裡的ip修改為IPv6儲存即可。 \n  dynamic_port = 9444  static_port = 8444 \n 這兩個是動態及靜態的port，如果要避免個人的團隊同時開啟會起衝突，可以修改這個號碼。 \n fossil的設定： https://mde.tw/cd2025/content/Fossil.html \n w5：介紹webots的用法與功能及更新wscite \n 把這個 Webots_2025a.7z 下載並解壓縮到可攜data目錄內，然後開啟start.bat使用其中的小黑窗cmd輸入指令webotsw就能夠開啟程式。 \n 將 wscite_5.5.5.7z 下載後解壓並與 portable_wcm2025.7z \xa0data目錄中的wscite進行更換，以將小白窗更新至最新版本，因為舊版的wscite有bug \n w6：介紹webots的Tutorial1~5以及hw1作法 \n 啟動 Webots 如果尚未安裝，請下載並安裝 Webots，並遵循這些安裝說明。 \n 實作 #1：通過雙擊其圖標（或在終端命令行中調用它）來啟動 Webots。如果您是第一次在此計算機上運行 Webots，可能會提示您選擇圖形主題。您也可能會被邀請參加 Webots 指導之旅，請關閉該指導之旅。 \n 如果您從未見過，請花一些時間觀看指導遊覽中的演示。它們展示了 Webots 的許多可能性。指導遊覽也可以從 Webots 的幫助菜單中獲得。 \n 創建新世界 世界是一個包含信息的文件，如對象的位置、外觀、相互作用方式、天空的顏色、重力、摩擦、對象的質量等。它定義了模擬的初始狀態。不同的對象稱為節點，並在場景樹中分層組織。因此，一個節點可以包含子節點。世界存儲在具有 .wbt 擴展名的文件中。該文件格式源自 VRML97 語言，並且是人類可讀的。世界文件必須直接存儲在名為 worlds 的目錄中。 \n 實作 #2：通過點擊 3D 視圖的暫停按鈕暫停當前模擬（請參閱用戶界面說明以了解按鈕）。如果主工具欄上的虛擬時間計數器停止，則模擬已暫停。從 文件 / 新建 / 新建項目目錄... 菜單項目中創建一個新項目並按照說明操作： \n 將項目目錄命名為 my_first_simulation，而不是建議的 my_project。 將世界文件命名為 my_first_simulation.wbt，而不是建議的 empty.wbt。 選中所有勾選框，包括默認未選中的 "添加矩形競技場"。 Webots 顯示了一個剛剛創建的目錄和文件列表。這對應於 Webots 項目的標準文件層次結構。單擊 完成 (Windows, Linux) 或 完成 (macOS) 按鈕以關閉此窗口。 \n 恭喜您，您剛剛創建了您的第一個 Webots 世界！3D 視圖應顯示一個帶有格子地板的方形競技場。您可以使用鼠標移動 3D 視圖中的視點：左鍵、右鍵和滾輪。 \n 存儲在世界文件中的 Webots 節點在稱為場景樹的樹結構中組織。場景樹可以在主窗口的兩個子窗口中查看：3D 視圖（在主窗口的中心）是場景樹的 3D 表示，場景樹視圖（在左側）是場景樹的分層表示。場景樹視圖是可以修改節點和字段的地方。它應當列出以下節點： \n WorldInfo：包含模擬的全局參數。 Viewpoint：定義主視點攝像機參數。 TexturedBackground：定義場景的背景（如果稍微旋轉視點，應該會看到遠處的山脈） TexturedBackgroundLight：定義與上述背景相關的光。 RectangleArena：定義您在此場景中到目前為止看到的唯一對象。 每個節點都有一些可自定義的屬性，稱為字段。讓我們修改這些字段來更改矩形競技場： \n 實作 #3：在場景樹中雙擊 RectangleArena 節點。這應該會打開節點並顯示其字段。 \n 選擇 floorTileSize 字段，將其值設置為 0.25 0.25 而不是 0.5 0.5。您應該會在 3D 視圖中立即看到效果。 選擇 wallHeight 字段，將其值更改為 0.05 而不是 0.1。競技場的牆壁應現在更低了。 在場景樹視圖中，如果字段與其默認值不同，則會以不同的顏色顯示（取決於主題）。現在，我們想添加一些對象： \n 實作 #4：在場景樹中雙擊 RectangleArena 以將其關閉並選中它。點擊場景樹頂部的添加按鈕。在打開的對話框中，選擇 PROTO 節點（Webots 項目）/ 對象 / 工廠 / 容器 / WoodenBox（實體）。應該會在競技場中間出現一個大箱子。在場景樹中雙擊它以打開其字段。 \n 將其大小更改為 0.1 0.1 0.1 而不是 0.6 0.6 0.6。 將其平移更改為 0 0 0.05 而不是 0 0 0.3。另外，您可以使用 3D 視圖中出現的藍色箭頭來調整其 translation.z 字段。 現在按住 Shift 鍵並拖動 3D 視圖中的箱子，將其移動到競技場的某個角落。 選中箱子，按 Ctrl-C、Ctrl-V（Windows、Linux）或 ⌘ Command-C、⌘ Command-V（macOS）複制並粘貼它。按住 Shift 鍵並拖動新箱子將其移動到不同的位置。以此方式創建第三個箱子。 移動箱子，使競技場中心沒有箱子。您還可以使用藍色旋轉箭頭沿垂直軸旋轉箱子。這也可以通過按住 Shift 鍵並拖動右鍵來完成。另外，您可以更改場景樹中 WoodenBox 節點的 rotation 字段角度。 一旦您對結果滿意，請使用保存按鈕保存世界。 使用平移和旋轉手柄移動對象的操作在此部分中進行了解釋。 \n 添加 e-puck 機器人 e-puck 是一個小型機器人，具有差動輪、10 個 LED 和多個傳感器，包括 8 個距離傳感器和一個攝像頭。在本教程中，我們只對使用其輪子感興趣。我們將在接下來的教程中學習如何使用其他功能。 \n 現在，我們將向世界中添加一個 e-puck 模型。確保模擬已暫停並且虛擬時間已經過 0。如果不是這樣，請使用重置按鈕重置模擬。 \n 當意圖保存時修改 Webots 世界時，首先暫停並重新加載其初始狀態非常重要，即主工具欄上的虛擬時間計數器應顯示 0:00:00:000。否則，每次保存時，每個 3D 對象的位置可能會累積錯誤。因此，應按以下順序進行世界的任何修改：暫停、重置、修改並保存模擬。 \n 我們不需要從頭開始創建 e-puck 機器人，我們只需導入一個 E-puck 節點。該節點實際上是一個 PROTO 節點，就像我們之前介紹的 RectangleArena 或 WoodenBox 一樣。原型設計允許您創建自定義對象並重用它們。 \n 實作 #5：選擇場景樹視圖中的最後一個節點 WoodenBox。點擊場景樹視圖頂部的添加按鈕。在對話框中，選擇 PROTO 節點（Webots 項目）/ 機器人 / gctronic / e-puck / E-puck（機器人）。應該會在競技場中間出現一個 e-puck 機器人。像移動箱子一樣移動和旋轉該機器人。保存模擬並按運行實時按鈕。 \n 機器人應該會移動、閃爍 LED 並避開障礙物。這是因為它具有具有該行為的默認控制器。您可能已經注意到 3D 視圖的左上角出現了一個小黑窗口。它顯示了由 e-puck 機器人攝像頭拍攝的圖像。該圖像將保持黑色，直到機器人的控制器顯式啟用攝像頭。這個小圖像窗口可以通過拖動來移動。它也可以通過拖動右下角來調整大小。最後，可以通過點擊右上角的 "x" 關閉它。您可以從覆疊菜單中再次選擇它，在攝像頭設備子菜單中選擇它。因為我們不需要它，所以您實際上可以關閉它。 \n 現在，當模擬運行時，讓我們玩一下物理： \n 實作 #6：通過按住 Alt + 左鍵單擊 + 拖動來對機器人施加力（在某些 Mac 鍵盤上使用 ⌥ Option 鍵）。在 Linux 上，您還應該按住 Ctrl 鍵，此外還有 Alt + 左鍵單擊 + 拖動。無法對 WoodenBox 節點施加力，因為默認情況下，它們沒有質量並被認為是粘在地板上的。要在 WoodenBox 節點上啟用物理，您應將其質量字段設置為某個值（例如 0.2 公斤）。一旦完成，應該也可以對它們施加力。 \n 模擬可以暫停、逐步運行、實時運行或快速運行。 \n 現在我們將修改世界並減少物理模擬的步長：這將提高模擬的準確性和穩定性（但會降低最大模擬速度）。 \n 實作 #7：暫停模擬並恢復它。在場景樹視圖中，展開 WorldInfo 節點（第一個節點）。將其 basicTimeStep 字段設置為 16。然後保存模擬。 \n 創建新控制器 我們現在將編寫一個簡單的控制器，使機器人向前移動。 \n 控制器是一個定義機器人行為的程序。Webots 控制器可以用以下編程語言編寫：C、C++、Java、Python、MATLAB 等。C、C++ 和 Java 控制器需要在運行前編譯。Python 和 MATLAB 控制器是解釋型語言，因此它們將無需編譯即可運行。在本教程中，我們將使用 C 作為參考語言，但所有代碼片段也可用於 C++、Java、Python 和 MATLAB。請參閱語言章節以設置使用不同編程語言的控制器。 \n Robot 節點的 controller 字段指定當前與機器人關聯的控制器。請注意，相同的控制器可以由多個機器人使用，但一個機器人一次只能使用一個控制器。每個控制器在通常由 Webots 生成的單獨子進程中執行。由於它們是獨立的進程，因此控制器不共享相同的地址空間，並且可以在不同的處理器核心上運行。 \n 實作 #8：使用 文件 / 新建 / 新建機器人控制器... 菜單項目創建一個名為 epuck_go_forward（對於 C++ 和 Java，請稱其為 EPuckGoForward）的新 C（或其他語言）控制器。這將在 my_first_simulation/controllers 中創建一個新的 epuck_go_forward（或 EPuckGoForward）目錄。選擇選項以在文本編輯器中打開源文件。 \n 新的源文件顯示在 Webots 文本編輯器窗口中。該源文件可以在無需修改的情況下編譯（如果是用 C、C++ 或 Java 編寫的），但當前代碼沒有實際效果。我們現在將新的 epuck_go_forward（或 EPuckGoForward）控制器與 E-puck 節點關聯。 \n CC++PythonJavaMATLAB 實作 #9：在場景樹視圖中，選擇 E-puck 節點的 controller 字段，然後使用場景樹視圖底部的字段編輯器：按選擇... 按鈕，然後在列表中選擇 epuck_go_forward。一旦控制器與機器人關聯，請保存世界。通過插入 include 語句（#include <webots/motor.h>）、獲取電機設備（WbDeviceTag motor = wb_robot_get_device("motor_name");）並應用電機命令（wb_motor_set_position(motor, 10);）來修改程序： \n \n C \n \n \n #include <webots/robot.h>\n\n// 添加了一個新的 include 文件\n#include <webots/motor.h>\n\n#define TIME_STEP 64\n\nint main(int argc, char **argv) {\n wb_robot_init();\n\n // 獲取電機設備\n WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");\n WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");\n // 設置電機的目標位置\n wb_motor_set_position(left_motor, 10.0);\n wb_motor_set_position(right_motor, 10.0);\n\n while (wb_robot_step(TIME_STEP) != -1);\n\n wb_robot_cleanup();\n\n return 0;\n} \n \n \n \n 保存修改過的源代碼（文件 / 保存文本文件），並編譯它（構建 / 構建）。如果有必要，修復任何編譯錯誤。當 Webots 提出重置或重新加載世界時，選擇重置並運行模擬。 \n 如果一切正常，您的機器人應該會向前移動。機器人將以最大速度移動一段時間，然後在車輪旋轉 10 弧度後停止。 \n 在項目的 controllers 目錄中，已創建了一個包含 epuck_go_forward（或 EPuckGoForward）控制器的目錄。epuck_go_forward（或 EPuckGoForward）目錄包含一個在控制器編譯後生成的 epuck_go_forward（或 EPuckGoForward）二進制文件（在 Windows 上，此文件具有 .exe 擴展名）。控制器目錄名稱應與二進制名稱匹配。 \n 擴展控制器以進行速度控制 機器人的輪子通常使用速度控制，而不是我們在上一個示例中使用的位置控制。為了以速度控制輪子的電機，您需要將目標位置設置為無限大並設置所需的速度： \n CC++PythonJavaMATLAB 實作 #10：修改控制器程序如下所示，重新編譯並運行它： \n \n \n C\n\n#include <webots/robot.h>\n\n// 添加了一個新的 include 文件\n#include <webots/motor.h>\n\n#define TIME_STEP 64\n\n#define MAX_SPEED 6.28\n\nint main(int argc, char **argv) {\n  wb_robot_init();\n\n  // 獲取電機的處理程序並將目標位置設置為無限大（速度控制）\n  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");\n  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");\n  wb_motor_set_position(left_motor, INFINITY);\n  wb_motor_set_position(right_motor, INFINITY);\n\n  // 以 MAX_SPEED 的 10% 設置電機速度。\n  wb_motor_set_velocity(left_motor, 0.1 * MAX_SPEED);\n  wb_motor_set_velocity(right_motor, 0.1 * MAX_SPEED);\n\n  while (wb_robot_step(TIME_STEP) != -1) {\n  }\n\n  wb_robot_cleanup();\n\n  return 0;\n} \n \n \n 機器人現在將移動（車輪將以每秒 0.2 弧度的速度旋轉）並且永遠不會停止。如果沒有發生任何事情，不要忘記通過選擇構建 / 構建菜單項或單擊代碼區域上方的齒輪圖標來編譯代碼。編譯錯誤以紅色顯示在控制台中。如果有任何錯誤，請修復它們並重試編譯。然後，重新加載世界。 \n 結論 我們希望您喜歡創建您的第一個 Webots 模擬。您已經能夠設置一個世界，添加一個機器人並對其進行編程。重要的是您學習了以下基本概念： \n 一個世界由組織成樹結構的節點組成。 世界保存在存儲於 Webots 項目中的 .wbt 文件中。 項目還包含定義機器人行為的機器人控制器程序。 控制器可以用 C 或其他語言編寫。 C、C++ 和 Java 控制器必須顯式編譯才能運行。 控制器通過 Robot 節點的 controller 字段與機器人關聯。 \n w7：清明節放假 \n w8：學習將零件檔匯入webots組合 \n w9： 填寫期中成績表單， 學習使用webots streaming viewer \n w10：填寫自評表並檢視課程進度 \n w11：學習使用webots製作四連桿機構 \n 0502.7z \n w12：完成HW並填寫HW自評表單 \n w13：完成Exam並填寫Exam表單 \n w14：檢查HW1 Webots Streaming Viewer串流網頁 \n w15：端午節放假 \n w16：檢查HW學習成果 \n w17：檢查Exam學習成果', 'tags': '', 'url': 'Attendance.html'}, {'title': 'w16', 'text': 'w16-1 \n \n 過程心得：將hw1的link1連桿修改為0.2，除了修改box的長度為0.2之外，link1的pose、link2和link3的rotation角度、joint2的anchor位置也要跟著更改。 \n W16-1.7z \n w16-2 \n \n 過程心得： 將hw2的link1連桿修改為20，這裡因為hw2組合件的相對位置是在轉stl前就先決定好的，所以要先回到solvespaces修改零件檔，將新的link1與其他零件組合完畢之後再次匯出為stl檔，再透過程式轉為obj，之後進到webots匯入零件檔進行設定，設定好之後只要將各個joint與原點之間的相對座標輸入進去即可，其他部分都由原本匯出的組合圖決定好了。不過這次也有遇到新問題，一開始轉起來都歪歪的，後來知道是因為我原本建立的組合圖base1沒有和原點重合，我學到了匯入webots的圖檔的圓心座標是根據原圖檔的座標定義的，後來考慮到如果修改原圖檔再重新匯出的話，所有節點設定全部都要重新調整，所以決定直接抓原圖檔中各個joint與原點之間的距離來輸入webots，最後也順利的完成了這個任務。 \n W16-2.7z', 'tags': '', 'url': 'w16.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'task1', 'text': 'w1：建立個人倉儲網頁及分組', 'tags': '', 'url': 'task1.html'}, {'title': 'list', 'text': '學員作業網站與倉儲連結 \n 分組網站與倉儲連結 \n', 'tags': '', 'url': 'list.html'}, {'title': 'task2', 'text': 'putty設定補充： \n 要使用非系上的外部電腦維護倉儲，要將putty裡面的proxy type設為none，這樣就會變成用ipv4直接連結github，平常在學校則是使用ipv6，要將type設為http connect，因為github只支援ipv4，所以ipv6要透過proxy傳輸給github。我們ipv6用的系上的伺服器，如果直接從外部電腦用http connect連上的話會被擋下來，就會導致雖然ssh認證通過了，但ipv6不給你用，因此在使用外部電腦維護倉儲時，需要切換為ipv4，也就是將proxy type 設為none，這樣就不用通過學校的伺服器而是直接連上github，還有記得改完proxy type要回去session按save。', 'tags': '', 'url': 'task2.html'}, {'title': 'w3', 'text': '學員作業網站與倉儲連結 \n 分組網站與倉儲連結 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'task3', 'text': '使用 Solvespace 建立平面四連桿系統零組件 (HW2) \n 建造平面四連桿的尺寸設計: 固定桿長度 連結圓心 長為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m \n fourbar_slvs.7z \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': 'w4：學習如何建立ssh協定執行作業倉儲的推送 \n 參考頁面： https://mde.tw/cd2025/content/SSH.html \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 https://mde.tw/cd2025/content/IPv6.html \n IPv6 : 2001:288:6004:17:fff1:cd25:0000:a006 gateway: 2001:288:6004:17::254 dns server: 2001:288:6004:17::3 \n 設定完ssh之後到控制台的網路和共用中心的乙太網路內容中的ipv6進行如上修改， \n 然後再把倉儲中的init.py裡的ip修改為IPv6儲存即可。 \n dynamic_port = 9444 static_port = 8444 \n 這兩個是動態及靜態的port，如果要避免個人的團隊同時開啟會起衝突，可以修改這個號碼。 \n fossil的設定： https://mde.tw/cd2025/content/Fossil.html', 'tags': '', 'url': 'task4.html'}, {'title': 'task5', 'text': '1. 請用繁體中文詳細說明下列資料:\xa0 https://cyberbotics.com/doc/guide/introduction-to-webots\xa0 \n 什麼是 Webots？ \n Webots是一款專業的行動機器人模擬軟體套件。它提供了一個快速原型環境，讓使用者可以創建具有質量、關節、摩擦係數等物理特性的 3D 虛擬世界。 \n 使用者可以添加簡單的被動物件或稱為移動機器人的主動物件。這些機器人可以有不同的運動方案（輪式機器人、腿部機器人或飛行機器人）。此外，它們可能配備有許多感測器和執行器裝置，例如距離感測器、驅動輪、攝影機、馬達、觸控感測器、發射器、接收器等。 \n 最後，使用者可以單獨對每個機器人進行編程，以表現出所需的行為。 Webots包含大量的機器人模型和控制器程式範例，幫助使用者入門。 \n Webots 還包含許多與真實移動機器人的接口，因此一旦您的模擬機器人表現如預期，您就可以將其控製程序轉移到真實的機器人，如 e-puck、DARwIn-OP、Nao 等。 \n Webots 模擬： \n Webots 模擬由以下項目組成： \n 定義一個或多個機器人及其環境的 Webots 世界檔案 (.wbt)。 .wbt 檔案有時確實依賴外部 PROTO 檔案 (.proto) 和紋理。 \n 一個或多個用於上述機器人的控制器程式（C/C++/Java/Python/MATLAB 語言）。 \n 可選的實體插件，可用於修改 Webots 常規物理行為（在 C/C++ 中）。 \n 什麼是世界？ \n 在 Webots 中，世界是對機器人及其環境屬性的 3D 描述。它包含每個物件的描述：位置、方向、幾何形狀、外觀（如顏色或亮度）、物理屬性、物件類型等。 \n 世界被組織為層次結構，其中物件可以包含其他物件（類似於 VRML97）。 \n 例如，一個機器人可以包含兩個輪子、一個距離感測器和一個本身包含攝影機的關節等。 \n 世界文件不包含機器人的控制器程式碼；它僅指定每個機器人所需的控制器的名稱。世界保存在“.wbt”文件中。 「.wbt」檔案儲存在每個 Webots 專案的「worlds」子目錄中。 \n 什麼是控制器？ \n 控制器是一種控制世界文件中指定的機器人的電腦程式。 \n 控制器可以用 Webots 支援的任何程式語言編寫：C、C++、Java、Python 或 MATLAB。 \n 當模擬開始時，Webots 會啟動指定的控制器（每個控制器作為單獨的進程），並將控制器進程與模擬機器人關聯起來。 \n 請注意，多個機器人可以使用相同的控制器程式碼，但是每個機器人都會啟動不同的進程。 \n 有些程式語言需要編譯（C 和 C++），其他語言需要解釋（Python 和 MATLAB），有些需要編譯和解釋（Java）。 \n 例如，C 和 C++ 控制器被編譯為平台相關的二進位可執行檔（例如 Windows 下的“.exe”）。 \n Python 和 MATLAB 控制器由對應的執行時間系統（必須安裝）解釋。 \n Java 控制器需要編譯為字節碼（“.class”檔案或“.jar”），然後由 Java 虛擬機器解釋。 \n 每個控制器的來源檔案和二進位檔案都一起儲存在一個控制器目錄中。每個 Webots 專案的「控制器」子目錄中都會有一個控制器目錄。 \n 什麼是主管控制器？ \n 主管控制器是主管欄位設定為 TRUE 的機器人的控制器，它可以執行通常只能由人類操作員而不能由真實機器人執行的操作。 \n Supervisor 控制器可以用上述任何一種程式語言編寫。然而，與常規機器人控制器不同的是，Supervisor 控制器可以存取特權操作。特權操作包括模擬控制，例如將機器人移動到隨機位置、對模擬進行視訊擷取等。 \n \n 2.請整理\xa0 https://cyberbotics.com/doc/guide/introduction-to-webots \xa0中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明. \n 英文單字： \n \n \n \n simulation \n 模擬 \n Noun：a simulation of robot movement \n \n \n \n \n \n \n software package \n 軟體套件 \n 指一整套軟體工具 \n \n \n \n \n \n \n rapid prototyping \n 快速原型製作 \n 常用於產品開發與研究 \n \n \n \n \n \n \n physics properties \n 物理特性 \n 指模擬物體的質量、摩擦力等 \n \n \n \n \n \n \n mobile robots \n 移動式機器人 \n 指能移動的機器人 \n \n \n \n \n \n \n locomotion schemes \n 移動方式 \n scheme 表示一種方案、模式 \n \n \n \n \n \n \n sensors / actuators \n 感測器 / 執行器 \n 控制與感知裝置 \n \n \n \n \n \n \n controller program \n 控制程式 \n 用於控制機器人 \n \n \n \n \n \n \n interfaces \n 介面、接合點 \n 指 Webots 與真實機器人的連接方式 \n \n \n \n \n \n \n real robots \n 真實機器人 \n 相對於模擬中的虛擬機器人 \n \n \n \n \n \n \n multi-agent research \n 多智能體研究 \n 指多個機器人協同行動的研究 \n \n \n \n \n \n \n adaptive behavior \n 適應性行為 \n 指機器人學習與環境互動的能力 \n \n \n \n \n \n \n graphical programming language \n 圖形化程式語言 \n 如 Scratch 或 BotStudio \n \n \n \n \n \n \n 3D computer graphics \n 3D電腦圖形 \n 指 3D 模型相關知識 \n \n \n \n \n \n \n VRML97 \n 虛擬實境建模語言 \n Webots 採用的語言格式 \n \n \n \n \n \n \n support / user support \n 使用者支援 \n 技術支援的通稱 \n \n \n \n \n \n \n supervisor \n 監督者 \n 在模擬中具有特權控制能力的機器人 \n \n \n \n \n 文法說明： \n 第一段：What is Webots? Webots is a professional mobile robot simulation software package. 主詞： Webots \n be 動詞： is \n 補語（名詞片語）： a professional mobile robot simulation software package \n 用法說明： 簡單現在式，用來描述「Webots 是什麼」。 \n It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds... 主詞： It（= Webots） \n 動詞： offers \n 受詞： a rapid prototyping environment \n 關係子句： that allows the user to create... \n 語法重點： 這是一個限定用法的關係子句，用 that 引導（非用逗號比較正確，這裡有些文體鬆散）。 \n These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots). 情態動詞： can（表示能力或可能性） \n have + 名詞片語： have different locomotion schemes \n 括號補充說明： 非限定用法，用來列舉例子（可省略不影響主句結構） \n They may be equipped with a number of sensor and actuator devices... may + 被動語態： may be equipped \n with + 名詞片語： with sensor and actuator devices \n 語法重點： 被動語態，表示「可能會被配備」 \n 第二段：What can I do with Webots? Webots is well suited for research and educational projects... be 動詞 + 過去分詞： is suited（表被動狀態） \n well 修飾 suited： 程度副詞 \n for + 名詞片語： for research and educational projects \n Many mobile robotics projects have relied on Webots for years... 現在完成式： have relied（從過去到現在一直使用） \n on + 受詞： on Webots \n for + 時間： for years（表示持續一段時間） \n 段落：What is a Controller? A controller is a computer program that controls a robot specified in a world file. 主句： A controller is a computer program \n 關係子句： that controls a robot \n 分詞片語修飾 robot： specified in a world file（過去分詞，修飾 robot） \n 語法重點： 關係子句 + 分詞修飾，表明是哪一個機器人 \n Some programming languages need to be compiled (C and C++), other languages need to be interpreted... need to + 被動動詞： need to be compiled / interpreted \n 列舉對比結構： some..., other... \n 括號中的例子為補充說明 \n Supervisor Controller 段落 The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE... 主句： The Supervisor controller is the controller \n of a Robot（介系詞片語） \n whose... is set to TRUE（關係子句）： 修飾 Robot \n 語法重點： whose 引導所有格關係子句 \n \n 3.請摘要出下列內容: \n What is Webots? Webots is a professional mobile robot simulation software that provides a rapid prototyping environment. It allows users to create 3D virtual worlds with physics properties (e.g., mass, joints, friction) and add passive or active objects like mobile robots. Users can equip robots with sensors and actuators and program them for desired behaviors. It offers numerous robot models, examples, and interfaces to transfer simulations to real robots like e-puck or Nao. \n What can I do with Webots? Webots is ideal for research and education in mobile robotics, supporting projects like robot prototyping (e.g., academic, automotive, toy industries), locomotion research (legged, humanoid robots), multi-agent studies (swarm intelligence, collaborative robots), and adaptive behavior research (genetic algorithms, AI). It’s also used for teaching robotics and robot competitions. \n What do I need to know to use Webots? Basic knowledge of C, C++, Java, Python, or MATLAB is required to program controllers, though beginners can use the graphical BotStudio language for certain robots (e.g., e-puck). To create custom models or environments, familiarity with 3D graphics and VRML97 is needed for designing or importing 3D objects. \n How do I get User Support? Cyberbotics offers paid support via Premier Service plans and custom development. Community-based support is available through Robotics StackExchange (webots tag), GitHub Discussions (development questions), GitHub Issues (bug reports), and Discord (quick discussions), though responses aren’t guaranteed. \n Webots Simulation A Webots simulation consists of a world file (.wbt) defining robots and their environment, controller programs (in C/C++/Java/Python/MATLAB), and an optional physics plugin (in C/C++) to adjust physics behavior. World files may rely on external PROTO files and textures. \n What is a World? A "world" in Webots is a 3D description of robots and their environment, detailing properties like position, geometry, appearance, and physics. Organized hierarchically (like VRML97), world files (.wbt) specify controller names but don’t include the controller code itself. \n What is a Controller? A controller is a program that directs a robot in a world file, written in C, C++, Java, Python, or MATLAB. Webots launches each controller as a separate process per robot at simulation start. Some languages require compilation (e.g., C/C++), others interpretation (e.g., Python), with files stored in the "controllers" subdirectory. \n What is a Supervisor Controller? A supervisor controller, tied to a robot with its "supervisor" field set to TRUE, can perform privileged actions (e.g., simulation control, moving robots, recording videos) typically reserved for human operators. Written in any supported language, it has greater capabilities than standard controllers. \n \n 4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法: \n simulation   (n.) \n \n \n 中文：  模擬 \n \n \n 原文句：   "Webots is a professional mobile robot simulation software package." \n \n \n 用法：  作為名詞使用，修飾  software package ，整體意思是「模擬軟體套件」。 \n \n \n 2.  prototype / prototyping   (n./v./adj.) \n \n \n 中文：  原型／做原型 \n \n \n 原文句：   "It offers a rapid prototyping environment..." \n \n \n 用法：   prototyping  是動名詞，做為形容詞修飾  environment ，表「能快速製作原型的環境」。 \n \n \n 3.  environment   (n.) \n \n \n 中文：  環境 \n \n \n 原文句：   "...that allows the user to create 3D virtual worlds with physics properties..." \n \n \n 用法：  與形容詞  rapid prototyping  搭配，構成名詞片語  a rapid prototyping environment 。 \n \n \n 4.  physics properties   (n. 複數) \n \n \n 中文：  物理屬性 \n \n \n 原文句：   "...with physics properties such as mass, joints, friction coefficients..." \n \n \n 用法：   with  引導的介系詞片語，修飾  worlds ； such as  引導舉例。 \n \n \n 5.  locomotion   (n.) \n \n \n 中文：  移動、運動方式 \n \n \n 原文句：   "These robots can have different locomotion schemes..." \n \n \n 用法：  作為名詞，與  schemes  結合表示「移動方案」。 \n \n \n 6.  sensor / actuator   (n.) \n \n \n 中文：  感測器 / 執行器 \n \n \n 原文句：   "...equipped with a number of sensor and actuator devices..." \n \n \n 用法：  被動語態  be equipped with ，後面接複數名詞。 \n \n \n 7.  controller   (n.) \n \n \n 中文：  控制器，控制程式 \n \n \n 原文句：   "Webots contains a large number of robot models and controller program examples..." \n \n \n 用法：  作名詞，修飾  program examples ，代表用來控制機器人的程式。 \n \n \n 8.  interface   (n.) \n \n \n 中文：  接口，介面 \n \n \n 原文句：   "Webots also contains a number of interfaces to real mobile robots..." \n \n \n 用法：   interface  與  to  搭配表示「連接至...的介面」。 \n \n \n 9.  real   (adj.) \n \n \n 中文：  真實的 \n \n \n 原文句：   "...you can transfer its control program to a real robot like e-puck..." \n \n \n 用法：  修飾  robot ，表示與模擬相對的真實機器人。 \n \n \n 10.  adaptive   (adj.) \n \n \n 中文：  適應性的 \n \n \n 原文句：   "Adaptive behavior research (genetic algorithm, neural networks...)" \n \n \n 用法：  修飾名詞  behavior ，表示可根據環境調整的行為。 \n \n \n 11.  graphical programming language   (n. phrase) \n \n \n 中文：  圖形化程式語言 \n \n \n 原文句：   "...using a simple graphical programming language called BotStudio." \n \n \n 用法：   graphical  修飾  programming language ，整體是複合名詞片語。 \n \n \n 12.  support   (n./v.) \n \n \n 中文：  支援、技術協助 \n \n \n 原文句：   "Cyberbotics provides paid user support..." \n \n \n 用法：  作為名詞與  user  組成名詞片語  user support 。 \n \n \n 13.  issue / discussion   (n.) \n \n \n 中文：  問題／討論 \n \n \n 原文句：   "GitHub Issues should be used only to report bugs..." \n \n \n 用法：  特指 GitHub 平台的回報問題區（Issue）與討論區（Discussion）。 \n \n \n 14.  texture   (n.) \n \n \n 中文：  貼圖，材質 \n \n \n 原文句：   "...depends on external PROTO files (.proto) and textures." \n \n \n 用法：  作名詞，作為模擬世界的視覺元素之一。 \n \n \n 15.  hierarchical   (adj.) \n \n \n 中文：  階層式的 \n \n \n 原文句：   "Worlds are organized as hierarchical structures..." \n \n \n 用法：  修飾名詞  structures ，描述世界的資料組織方式。 \n \n \n 16.  supervisor   (n./adj.) \n \n \n 中文：  監督者 / 監督用的 \n \n \n 原文句：   "The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE..." \n \n \n 用法：  作為名詞與形容詞，描述有特殊權限的控制器。 \n \n \n 17.  privileged   (adj.) \n \n \n 中文：  特權的 \n \n \n 原文句：   "...access to privileged operations." \n \n \n 用法：   privileged  修飾  operations ，表示不是普通控制器能做的動作。 \n \n \n 18.  compile / interpret   (v.) \n \n \n 中文：  編譯 / 解譯 \n \n \n 原文句：   "Some programming languages need to be compiled... others interpreted..." \n \n \n 用法：  被動語態， need to be + 過去分詞  表示語言需要被處理的方式。 \n \n \n 19.  launch   (v.) \n \n \n 中文：  啟動、執行 \n \n \n 原文句：   "Webots launches the specified controllers..." \n \n \n 用法：  簡單現在式，主詞為 Webots，動詞為 launch。 \n \n \n \n 20.  process   (n.) \n \n \n 中文：  程序（程式執行實體） \n \n \n 原文句：   "...each as a separate process..." \n \n \n 用法：   as  表示「作為」，與  process  結合說明程式如何被執行。 \n \n \n \n 5.請詳細說明如何採手動方式在 Webots 建立下列場景: \n 步驟一：啟動 Webots 並建立新的專案 打開 Webots。 \n 點選上方選單： File → New Project Directory... 輸入資料夾名稱，按下「Create」。 \n 接著會跳出建立場景的選項，選擇 Empty World → 點選「Finish」。 \n 步驟二：建立世界元素（地板、物體、機器人等） ➤ 建立地板（Ground / Floor） 在左側 "Scene Tree"（場景樹） 視窗中，選取 root。 \n 右鍵 → Add new node... 選擇 Solid → OK。 \n 在 Solid 節點下，再加入： \n Shape（幾何外型） \n Appearance → Material（材質） \n Box（地板的形狀） \n 設定屬性如下（右側選單）： \n size: 10 10 0.1（寬、長、高） \n translation: 0 0 0.05 \n 小技巧：你也可以使用 Floor 節點，它是預設的地面。 \n ➤ 加入障礙物（例如牆壁、箱子） 點 root → 右鍵 → Add new node... → 選擇 Solid。 \n 在其中加入： \n Shape → Box \n Appearance（可加材質） \n 設定： \n size: 0.5 0.5 0.5（障礙物大小） \n translation: 1 1 0.25（位在地面上的座標） \n ➤ 加入機器人（e-puck） 點 root → 右鍵 → Add new node... \n 搜尋並加入：E-puck（Webots 內建機器人） \n 設定位置： \n translation: -1 0 0.035（剛好放在地上） \n 步驟三：加入感測器或照明（選擇性） ➤ 加入光源（Light） 點選 root → Add new node... → 選擇 PointLight 或 DirectionalLight \n 設定位置與亮度，例如： \n translation: 0 0 5（上方照射） \n color: 1 1 1（白光） \n ➤ 加入相機（Camera） 如果你想讓機器人視角觀看世界： \n 點選機器人（例如 E-puck）節點。 \n 右鍵 → Add new node... → 選擇 Camera \n 設定解析度與啟用時間： \n width: 640 \n height: 480 \n 在控制器中啟用 camera（見程式控制方式） \n 步驟四：儲存與執行 點選上方選單 File → Save World As... 存成 .wbt 檔案，放在 worlds 資料夾中。 \n 點擊播放按鈕 ▶️ 開始模擬！ \n 延伸：讓機器人移動（選擇性） 如果你想測試機器人移動，可加入控制程式： \n 點選機器人節點 → 設定 controller 欄位（例如選 e-puck_line_following）。 \n 或者自己寫一個簡單 Python 程式，放在 controllers 資料夾中。 \n \n 6.希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意? \n 一、建立新的模擬專案與場景 步驟 1：開啟 Webots → 新建專案 開啟 Webots。 \n 點選上方選單： File → New Project Directory... \n 輸入新專案資料夾名稱，例如 my_scene → 點「Create」。 \n 選擇： Empty world（空白場景）→ 點「Finish」。 \n 你現在會進入一個空白場景，只有地面與天空。 \n 二、加入地板（Floor） 步驟 2：加入地板（Box 形式） 在左邊的 Scene Tree（場景樹）中，右鍵點擊 root → 選擇： Add New Node... \n 搜尋並選擇：Solid → 點「Add」 \n 選中剛剛新增的 Solid，右鍵 → Add New > Shape \n 在 Shape 底下右鍵 → Add New > Box \n 再對 Shape 右鍵 → Add New > Appearance → Material \n 重點設定（右側「Field」欄位設定）： \n 在 Box 的 size 欄位填入：10 10 0.1 \n 在 Solid 的 translation 欄位填入：0 0 0.05 \n 說明： \n 地板厚度是 0.1，所以 y 軸（高度）要設定 0.05 讓它貼齊地面。 \n 這樣你就建立了一個10x10的「平面地板」。 \n 三、加入障礙物（例如箱子或牆壁） 步驟 3：新增障礙物 對 root 右鍵 → Add New Node... → 選 Solid \n 在此 Solid 裡一樣新增： \n Shape → Box \n Appearance → Material \n 設定數值如下： \n Box > size: 0.5 0.5 0.5 \n Solid > translation: 1 1 0.25 \n 說明： \n 高度為 0.5 → 要設在 y 軸 0.25 才能「站在地上」 \n 四、加入機器人（E-puck） 步驟 4：加入 e-puck 機器人 對 root 右鍵 → Add New Node... \n 搜尋並選擇：E-puck → 點「Add」 \n 設定位置： \n 在右側欄位中，找到 translation → 設定為：-1 0 0.035 \n 說明： \n e-puck 機器人本身高度是 0.07 左右，因此高度設為一半 0.035 會剛好落在地板上。 \n 五、加入光源（DirectionalLight） 步驟 5：讓場景更亮 對 root 右鍵 → Add New Node... \n 搜尋：DirectionalLight → 點「Add」 \n 設定建議： \n direction: -1 -1 -1（斜向照下來） \n color: 1 1 1（白色光） \n intensity: 2（亮一點） \n 六、加入攝影機（選擇性） 步驟 6：把相機加在 e-puck 上 點開 E-puck → 找到其 children 節點 → 右鍵 → Add New Node... \n 選擇：Camera → 點「Add」 \n 建議設定： \n width: 640 \n height: 480 \n translation: 0 0 0.05（放在機器人頭上） \n 七、儲存並執行模擬 步驟 7：儲存場景 點選上方選單： File → Save World As... \n 命名檔案，例如 basic_scene.wbt → 儲存到 worlds/ 資料夾 \n 步驟 8：執行模擬 點選工具列上方的「播放」按鈕 ▶️ \n 機器人會初始化（雖然還沒動，除非你加控制器）', 'tags': '', 'url': 'task5.html'}, {'title': 'task6', 'text': '', 'tags': '', 'url': 'task6.html'}, {'title': 'w10', 'text': '截至目前已完成:1.~7. \n 1. 最新的可攜程式系統與套件版本: \n portable_wcm2025_w10.7z \n 2. 已知如何自行建立各種版本的 Python 可攜系統: \n https://mde.tw/cd2025/content/Portable.html \xa0 \n 3. 已知哪一個版本 SciTE 較為穩定: \n 請更新上列 portable_wcm2025.7z 中的 wscite 為 5.5.5 版 ( wscite_5.5.5.7z , 解開壓縮檔案後取代 5.5.4 版的 wscite 目錄) \n 4. 已知如何使用 Codespaces 管理個人與協同分組的倉儲: \n ./init_replit (處理 codespaces 上的 python 模組, 令其可執行 python main.py 與 python main2.py) \n 5. 已知可以透過 token 或 Github session 管理管理個人與協同分組的倉儲: \n .git/config 中 url 將 token 放入即可取得權限 (透過 https) \n 利用 puttygen.exe 建立 keys, 然後以 session 取得維護倉儲的權限. \n https://mde.tw/cd2025/content/SSH.html \xa0 \n 6. 已知哪一個版本的 Webots 較為穩定: \n 備註: 已知 Webots 2025a 有不少 bugs, 其中包括操作過程閃退以及無法使用 Transform 節點, 因此可以換為\xa0 Webots_2023b.7z \xa0 版. \n 7. 已知如何更新個人與協同分組的倉儲, 以便套用所分配的 \xa0 IPv6 位址 啟動網際協同流程: \n 已知 w4 之前的學員作業倉儲版本, 無法在 IPv6 位址設定時正確運作, 各學員必須下載\xa0 cmsimde_w4.7z , 解開壓縮檔案後, 替換倉儲中的 cmsimde 目錄. \n 更改 init.py 中將 ip 設為所分配的 \xa0 IPv6 address . \n 8. 已知投籃機的零組件可以透過 Solvespace 與 Onshape 繪製, 其中前者簡便而後者有利於協同. \n fourbar_slvs.7z \xa0(joint4 設於 base 然後利用 SolidReference 指向 link3) \n 9. 已知如何利用 Solid - Shape - Box 或 Solid - CadShape 建立封閉式多連桿機構模擬, (若希望直接更改零組件顏色, 則可以使用 Solid - Shape - Mesh 進行多連桿機構進行組立: \n fourbar_box.7z \xa0(joint4 設於 base 右端, 然後利用 SolidReference 指向 link3) \n fourbar_box_w8.7z \xa0(joint4 設於 link3 末端, 然後利用 SolidReference 指向 static_environment) \n w10_2b_hw1_hw2_demo.7z \xa0(直接使用 Solid - Shape - Mesh 比較方便直接利用 material 設定零件顏色) \n 10. 已知可以透過 Solid - Shape - Mesh 中 material 的名稱, 以控制器程式改變顏色, 進而製作出七段顯示模擬器: \n \xa0 7_segment_display.7z \xa0(利用按鍵改變零件顏色) \n score_counter.7z \xa0(三個位數的 7 段顯示器模擬) \n 11. 已知可以透過 boundingObject 中的 Mesh 設定, 讓封閉連桿執行投籃動作, 且經由紅外線距離感測紀錄是否得分: \n basketball_game_demo.7z \n 12. 接下來若要利用各組員所分配的 \xa0 IPv6 位址 配置一台具備 https 連線用的網際協同伺服器, 建議使用 Virtualbox 或 \xa0 VMWare Workstation \xa0 加上 Nginx, Stunnel 或直接採 cmsimde 進行設定. \n win10.vdi \xa0 (Virtualbox 的 Windows 10 虛擬主機檔案) \n 13. 投籃機與籃框的移動裝置則可採用 \xa0 Kuka 套件項下 的 \xa0 Youbot \xa0 Mecanum \xa0 輪底座. \n https://mde.tw/cd2025/content/Youbot_cart.html \xa0 \n 14. (參考) 對於 webotsw --stream 在近端啟動伺服器的部分尚未完成, 目前僅能透過官方網站擷取 Webotsview.js, 具體問題在於 webots 串流伺服器啟動後, 不接受跨網域擷取 Webotsview.js, 亦即必須處理伺服器間的\xa0Access-Control-Allow-Origin（CORS）議題. 自行 \xa0 build webotsw.exe \xa0 應該就可以克服此一問題. \n 15. (參考) 另外 Webots stream server 目前僅接受多 client 檢視, 而不支援跨 server 執行 controller 指令, 若要在系統模擬架構下進行多人同步協同 (類似 CoppeliaSim 的串流控制), 則必須自行處理.', 'tags': '', 'url': 'w10.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41023137 \n \n 心得：一開始完成之後想說怎麼沒辦法轉完整的一圈，到一半就停下來了，後來聽老師說明了這個連桿機構馬達需要設在左下角的HingeJoint上才能夠進行轉整圈，之後我將馬達由右邊的 HingeJoint4改到左邊的HingeJoint1之後就成功了。 \n HW1.7z', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41023137 \n \n \n 心得： 這次的作業製作過程中我遇到了一些問題，一開始我找不到老師給的obj分割程式，所以自己叫AI寫了一個，但不知道為甚麼一直無法順利完成模擬。後來去詢問了老師之後，才了解到原來這個分割程式會將切割出來的obj檔案縮小100倍，原因是因為匯出成stl之後的檔案是沒有單位的，obj當然也是，而我們solvespace所匯出的stl檔預設單位是使用毫米，假設我們畫了一個40毫米的連桿匯出的stl就是40無單位，而webots所使用的單位是米，如果檔案就這樣不轉換直接匯進去就會變成40米，所以縮小100倍之後就可以變成題目所要求的0.4米的連桿，因此老師才這樣設計這個切割程式。了解了它的原理之後，我就利用老師給的程式順利切割零件並完成了這次的作業。 \n hw2.7z', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度:Attendance、Tasks-task1~5、Homework-Hw1 \n 各週網頁內容:ssh、webots \n 期中心得: 這次主要是學習利用ssh進行近端倉儲及網站的維護，並且透過將ipv4變更為ipv6，讓每個學員能夠以個人的身分進入團隊的倉儲網站進行維護。然後學習使用Webots進行機構及場景的模擬，並用以前學過的solvespaces練習組合件並匯入Webots進行模擬練習。 \n 期中自評影片: \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41023137 \n \n 心得：做法與hw1基本一致，不過Exam1在上面那根連桿上增加了一段0.3的短桿，並且將初始角度固定為個人的學號，而後面的兩個角度也回隨著初始角度而固定，所以事先進入solvespace畫出簡單的線架構並量測出這兩個角度，練習過幾次之後就順利的完成了。 \n 檔案： Exam1.7z', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41023137 \n \n 心得：Exam2整體上要比Exam1要簡單一點，主要是多了在前面要先用繪圖軟體建立組合件並用程式分割成obj零件檔，在進入Webots後要設定的東西就比Exam1要來得少很多，因為已經先利用cad檔定義完所有零件的尺寸和各零件之間的相對位置，因此只需要設定joint位置並將圖檔匯入即可。這次我了解到之前在hw2製作過程中所遇到的問題原因，那時我找不到老師給的obj分割程式，所以自己叫AI寫了一個，但不知道為甚麼一直無法順利完成模擬。後來去詢問了老師之後，才了解到原來這個分割程式會將切割出來的obj檔案縮小100倍，原因是因為匯出成stl之後的檔案是沒有單位的，obj當然也是，而我們solvespace所匯出的stl檔預設單位是使用毫米，假設我們畫了一個40毫米的連桿匯出的stl就是40無單位，而webots所使用的單位是米，如果檔案就這樣不轉換直接匯進去就會變成40米，所以縮小100倍之後就可以變成題目所要求的0.4米的連桿，因此老師才這樣設計這個切割程式。 \n 檔案： Exam2.7z', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 41023137 \n \n 心得：一開始測試的時候想說怎麼跑不出來，後來發現是因為我忘記要用 webotsw --stream去開webots， \n 而是使用原本的webotsw開啟，所以才會跑不出來。 \n 檔案： hw1.7z \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 41023137 \n \n 心得：整體操作下來與上一個的做法差不多，不過這次多了將檔案中的數字修改為學號這一步驟。 \n 檔案： three_digit_counter.7z \n 新增將數字更改為完整學號8位數的版本： three_digit_counter2.7z \n 操作流程：先將pose裡的background shape中的box的x長度修改為3，這樣背景才能裝得下八個數字，然後將third pose複製在下面貼五次，再依序將名稱變更為four~eight，這些pose下面的group也要改成一樣的名字，group下面的shape也要改，假設是four pose，裡面的shape就要依序改成A4~G4，five pose的話就改成A5~G5，以此類推，之後把background的pose的translation位置修改到跟顯示數字的位置一樣，最後將程式碼交由AI改寫成能夠顯示出八位數字的七段顯示器控制程式並存檔即可。 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 41023137 \n \n 心得：這個比前面兩個又再更複雜一些，其實要做的步驟很少，先用webots開啟老師給的wbt檔案，再用SciTE把老師給的檔案內的兩個python檔案打開，複製最上面的pip install websocket-client websocket-server keyboard這段程式碼到cmd執行，然後東西載完之後，先用SciTE把兩個檔案內的ipv6改成自己的ipv6裡，存檔然後執行，就可以看到車子在跑並且可以使用鍵盤的上下左右鍵來操控，最後跟前面兩個一樣用Webots Streaming Viewer打開確認即可。這題有一個重要的地方我也是弄了很久才搞定，就是start.bat裡面的python path要改成這樣 \n set PYTHONPATH=%Disk%:\\Python313\\DLLs;%Disk%:\\Python313\\Lib;%Disk%:\\Python313\\Lib\\site-packages;%Disk%:\\NX\\NXBIN\\python;%Disk%:\\Webots_2025a\\msys64\\mingw64\\bin;%Disk%:\\Webots_2025a\\lib\\controller\\python \n 然後REM for Webots的 \n set PYTHON_PATH=%Disk%:\\Python313 \n 下面要多加一個 \n set WEBOTS_HOME=%Disk%:\\Webots_2025a \n 不然youbot_cart_server.py執行的時候會一直顯示找不到controller，我前面就因為這樣卡了很久。 \n 檔案： youbot_cart_w10_websocket.7z', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41023137 \n \n 41023137協同產品設計期末報告.pdf \n Webots 動態投籃模擬系統的協同設計.pdf \n final.7z \n 心得：我在這次的期末報告的製作過程中，學習到了如何用floor建立webots內建的場景，以及如何利用內建的模型建立車子及發射器，還有可以透過convert to base nodes將建立的物體轉換成基礎節點等。', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};