<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站:<a href="https://mdecd2025.github.io/hw-41023137/content/index.html">https://mdecd2025.github.io/hw-41023137/content/index.html</a></p>
<p>學員作業倉儲:<a href="https://github.com/mdecd2025/hw-41023137">https://github.com/mdecd2025/hw-41023137</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Attendance</h1>
<p style="padding-left: 30px;"><strong>w1：建立個人倉儲網頁及分組</strong></p>
<p style="padding-left: 30px;"><strong>w2：228放假</strong></p>
<p style="padding-left: 30px;"><strong>w3：於list頁面建立分組名單</strong></p>
<p style="padding-left: 30px;"><strong>w4：學習如何建立ssh協定執行作業倉儲的推送</strong></p>
<p style="padding-left: 30px;">參考頁面：<a href="https://mde.tw/cd2025/content/SSH.html">https://mde.tw/cd2025/content/SSH.html</a></p>
<p style="padding-left: 30px;">              <a href="https://mde.tw/cd2025/content/IPv6.html">https://mde.tw/cd2025/content/IPv6.html</a></p>
<p style="padding-left: 30px;"><span>IPv6 : 2001:288:6004:17:fff1:cd25:0000:a006</span><br/><span>gateway: 2001:288:6004:17::254</span><br/><span>dns server:</span><span>2001:288:6004:17::3</span></p>
<p style="padding-left: 30px;"><span>設定完ssh之後到控制台的網路和共用中心的乙太網路內容中的ipv6進行如上修改，</span></p>
<p style="padding-left: 30px;"><span>然後再把倉儲中的init.py裡的ip修改為IPv6儲存即可。</span></p>
<p style="padding-left: 30px;"><span> dynamic_port = 9444<br/> static_port = 8444</span></p>
<p style="padding-left: 30px;"><span>這兩個是動態及靜態的port，如果要避免個人的團隊同時開啟會起衝突，可以修改這個號碼。</span></p>
<p style="padding-left: 30px;"><span>fossil的設定：<a href="https://mde.tw/cd2025/content/Fossil.html">https://mde.tw/cd2025/content/Fossil.html</a></span></p>
<p style="padding-left: 30px;"><strong>w5：介紹webots的用法與功能及更新wscite</strong></p>
<p style="padding-left: 30px;">把這個<a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a>下載並解壓縮到可攜data目錄內，然後開啟start.bat使用其中的小黑窗cmd輸入指令webotsw就能夠開啟程式。</p>
<h4 dir="auto"><span>什麼是 Webots？</span></h4>
<p><span><span>Webots是一款專業的行動機器人模擬軟體套件。它提供了一個快速原型環境，讓使用者可以創建具有質量、關節、摩擦係數等物理特性的 3D 虛擬世界。</span></span></p>
<p><span><span>使用者可以添加簡單的被動物件或稱為移動機器人的主動物件。這些機器人可以有不同的運動方案（輪式機器人、腿部機器人或飛行機器人）。此外，它們可能配備有許多感測器和執行器裝置，例如距離感測器、驅動輪、攝影機、馬達、觸控感測器、發射器、接收器等。</span></span></p>
<p><span><span>最後，使用者可以單獨對每個機器人進行編程，以表現出所需的行為。 Webots包含大量的機器人模型和控制器程式範例，幫助使用者入門。</span></span></p>
<p><span><span>Webots 還包含許多與真實移動機器人的接口，因此一旦您的模擬機器人表現如預期，您就可以將其控製程序轉移到真實的機器人，如 e-puck、DARwIn-OP、Nao 等。</span></span></p>
<h4><span><span>Webots 模擬：</span></span></h4>
<p><span><span>Webots 模擬由以下項目組成：</span></span></p>
<p><span><span>定義一個或多個機器人及其環境的 Webots 世界檔案 (.wbt)。 .wbt 檔案有時確實依賴外部 PROTO 檔案 (.proto) 和紋理。</span></span></p>
<p><span><span>一個或多個用於上述機器人的控制器程式（C/C++/Java/Python/MATLAB 語言）。</span></span></p>
<p><span><span>可選的實體插件，可用於修改 Webots 常規物理行為（在 C/C++ 中）。</span></span></p>
<h4><span><span>什麼是世界？</span></span></h4>
<p><span><span>在 Webots 中，世界是對機器人及其環境屬性的 3D 描述。它包含每個物件的描述：位置、方向、幾何形狀、外觀（如顏色或亮度）、物理屬性、物件類型等。</span></span></p>
<p><span><span>世界被組織為層次結構，其中物件可以包含其他物件（類似於 VRML97）。</span></span></p>
<p><span><span>例如，一個機器人可以包含兩個輪子、一個距離感測器和一個本身包含攝影機的關節等。</span></span></p>
<p><span><span>世界文件不包含機器人的控制器程式碼；它僅指定每個機器人所需的控制器的名稱。世界保存在“.wbt”文件中。 「.wbt」檔案儲存在每個 Webots 專案的「worlds」子目錄中。</span></span></p>
<h4><span><span>什麼是控制器？</span></span></h4>
<p><span><span>控制器是一種控制世界文件中指定的機器人的電腦程式。</span></span></p>
<p><span><span>控制器可以用 Webots 支援的任何程式語言編寫：C、C++、Java、Python 或 MATLAB。</span></span></p>
<p><span><span>當模擬開始時，Webots 會啟動指定的控制器（每個控制器作為單獨的進程），並將控制器進程與模擬機器人關聯起來。</span></span></p>
<p><span><span>請注意，多個機器人可以使用相同的控制器程式碼，但是每個機器人都會啟動不同的進程。</span></span></p>
<p><span><span>有些程式語言需要編譯（C 和 C++），其他語言需要解釋（Python 和 MATLAB），有些需要編譯和解釋（Java）。</span></span></p>
<p><span><span>例如，C 和 C++ 控制器被編譯為平台相關的二進位可執行檔（例如 Windows 下的“.exe”）。</span></span></p>
<p><span><span>Python 和 MATLAB 控制器由對應的執行時間系統（必須安裝）解釋。</span></span></p>
<p><span><span>Java 控制器需要編譯為字節碼（“.class”檔案或“.jar”），然後由 Java 虛擬機器解釋。</span></span></p>
<p><span><span>每個控制器的來源檔案和二進位檔案都一起儲存在一個控制器目錄中。每個 Webots 專案的「控制器」子目錄中都會有一個控制器目錄。</span></span></p>
<h4><span><span>什麼是主管控制器？</span></span></h4>
<p><span><span>主管控制器是主管欄位設定為 TRUE 的機器人的控制器，它可以執行通常只能由人類操作員而不能由真實機器人執行的操作。</span></span></p>
<p><span><span>Supervisor 控制器可以用上述任何一種程式語言編寫。然而，與常規機器人控制器不同的是，Supervisor 控制器可以存取特權操作。特權操作包括模擬控制，例如將機器人移動到隨機位置、對模擬進行視訊擷取等。</span></span></p>
<p style="padding-left: 30px;">將<a href="http://229.cycu.org/wscite_5.5.5.7z">wscite_5.5.5.7z</a>下載後解壓並與<a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> data目錄中的wscite進行更換，以將小白窗更新至最新版本，因為舊版的wscite有bug</p>
<p style="padding-left: 30px;"><strong>w6：介紹webots的Tutorial1~5以及hw1作法</strong></p>
<p>啟動 Webots 如果尚未安裝，請下載並安裝 Webots，並遵循這些安裝說明。</p>
<p>實作 #1：通過雙擊其圖標（或在終端命令行中調用它）來啟動 Webots。如果您是第一次在此計算機上運行 Webots，可能會提示您選擇圖形主題。您也可能會被邀請參加 Webots 指導之旅，請關閉該指導之旅。</p>
<p>如果您從未見過，請花一些時間觀看指導遊覽中的演示。它們展示了 Webots 的許多可能性。指導遊覽也可以從 Webots 的幫助菜單中獲得。</p>
<p>創建新世界 世界是一個包含信息的文件，如對象的位置、外觀、相互作用方式、天空的顏色、重力、摩擦、對象的質量等。它定義了模擬的初始狀態。不同的對象稱為節點，並在場景樹中分層組織。因此，一個節點可以包含子節點。世界存儲在具有 .wbt 擴展名的文件中。該文件格式源自 VRML97 語言，並且是人類可讀的。世界文件必須直接存儲在名為 worlds 的目錄中。</p>
<p>實作 #2：通過點擊 3D 視圖的暫停按鈕暫停當前模擬（請參閱用戶界面說明以了解按鈕）。如果主工具欄上的虛擬時間計數器停止，則模擬已暫停。從 文件 / 新建 / 新建項目目錄... 菜單項目中創建一個新項目並按照說明操作：</p>
<p>將項目目錄命名為 my_first_simulation，而不是建議的 my_project。 將世界文件命名為 my_first_simulation.wbt，而不是建議的 empty.wbt。 選中所有勾選框，包括默認未選中的 "添加矩形競技場"。 Webots 顯示了一個剛剛創建的目錄和文件列表。這對應於 Webots 項目的標準文件層次結構。單擊 完成 (Windows, Linux) 或 完成 (macOS) 按鈕以關閉此窗口。</p>
<p>恭喜您，您剛剛創建了您的第一個 Webots 世界！3D 視圖應顯示一個帶有格子地板的方形競技場。您可以使用鼠標移動 3D 視圖中的視點：左鍵、右鍵和滾輪。</p>
<p>存儲在世界文件中的 Webots 節點在稱為場景樹的樹結構中組織。場景樹可以在主窗口的兩個子窗口中查看：3D 視圖（在主窗口的中心）是場景樹的 3D 表示，場景樹視圖（在左側）是場景樹的分層表示。場景樹視圖是可以修改節點和字段的地方。它應當列出以下節點：</p>
<p>WorldInfo：包含模擬的全局參數。 Viewpoint：定義主視點攝像機參數。 TexturedBackground：定義場景的背景（如果稍微旋轉視點，應該會看到遠處的山脈） TexturedBackgroundLight：定義與上述背景相關的光。 RectangleArena：定義您在此場景中到目前為止看到的唯一對象。 每個節點都有一些可自定義的屬性，稱為字段。讓我們修改這些字段來更改矩形競技場：</p>
<p>實作 #3：在場景樹中雙擊 RectangleArena 節點。這應該會打開節點並顯示其字段。</p>
<p>選擇 floorTileSize 字段，將其值設置為 0.25 0.25 而不是 0.5 0.5。您應該會在 3D 視圖中立即看到效果。 選擇 wallHeight 字段，將其值更改為 0.05 而不是 0.1。競技場的牆壁應現在更低了。 在場景樹視圖中，如果字段與其默認值不同，則會以不同的顏色顯示（取決於主題）。現在，我們想添加一些對象：</p>
<p>實作 #4：在場景樹中雙擊 RectangleArena 以將其關閉並選中它。點擊場景樹頂部的添加按鈕。在打開的對話框中，選擇 PROTO 節點（Webots 項目）/ 對象 / 工廠 / 容器 / WoodenBox（實體）。應該會在競技場中間出現一個大箱子。在場景樹中雙擊它以打開其字段。</p>
<p>將其大小更改為 0.1 0.1 0.1 而不是 0.6 0.6 0.6。 將其平移更改為 0 0 0.05 而不是 0 0 0.3。另外，您可以使用 3D 視圖中出現的藍色箭頭來調整其 translation.z 字段。 現在按住 Shift 鍵並拖動 3D 視圖中的箱子，將其移動到競技場的某個角落。 選中箱子，按 Ctrl-C、Ctrl-V（Windows、Linux）或 ⌘ Command-C、⌘ Command-V（macOS）複制並粘貼它。按住 Shift 鍵並拖動新箱子將其移動到不同的位置。以此方式創建第三個箱子。 移動箱子，使競技場中心沒有箱子。您還可以使用藍色旋轉箭頭沿垂直軸旋轉箱子。這也可以通過按住 Shift 鍵並拖動右鍵來完成。另外，您可以更改場景樹中 WoodenBox 節點的 rotation 字段角度。 一旦您對結果滿意，請使用保存按鈕保存世界。 使用平移和旋轉手柄移動對象的操作在此部分中進行了解釋。</p>
<p>添加 e-puck 機器人 e-puck 是一個小型機器人，具有差動輪、10 個 LED 和多個傳感器，包括 8 個距離傳感器和一個攝像頭。在本教程中，我們只對使用其輪子感興趣。我們將在接下來的教程中學習如何使用其他功能。</p>
<p>現在，我們將向世界中添加一個 e-puck 模型。確保模擬已暫停並且虛擬時間已經過 0。如果不是這樣，請使用重置按鈕重置模擬。</p>
<p>當意圖保存時修改 Webots 世界時，首先暫停並重新加載其初始狀態非常重要，即主工具欄上的虛擬時間計數器應顯示 0:00:00:000。否則，每次保存時，每個 3D 對象的位置可能會累積錯誤。因此，應按以下順序進行世界的任何修改：暫停、重置、修改並保存模擬。</p>
<p>我們不需要從頭開始創建 e-puck 機器人，我們只需導入一個 E-puck 節點。該節點實際上是一個 PROTO 節點，就像我們之前介紹的 RectangleArena 或 WoodenBox 一樣。原型設計允許您創建自定義對象並重用它們。</p>
<p>實作 #5：選擇場景樹視圖中的最後一個節點 WoodenBox。點擊場景樹視圖頂部的添加按鈕。在對話框中，選擇 PROTO 節點（Webots 項目）/ 機器人 / gctronic / e-puck / E-puck（機器人）。應該會在競技場中間出現一個 e-puck 機器人。像移動箱子一樣移動和旋轉該機器人。保存模擬並按運行實時按鈕。</p>
<p>機器人應該會移動、閃爍 LED 並避開障礙物。這是因為它具有具有該行為的默認控制器。您可能已經注意到 3D 視圖的左上角出現了一個小黑窗口。它顯示了由 e-puck 機器人攝像頭拍攝的圖像。該圖像將保持黑色，直到機器人的控制器顯式啟用攝像頭。這個小圖像窗口可以通過拖動來移動。它也可以通過拖動右下角來調整大小。最後，可以通過點擊右上角的 "x" 關閉它。您可以從覆疊菜單中再次選擇它，在攝像頭設備子菜單中選擇它。因為我們不需要它，所以您實際上可以關閉它。</p>
<p>現在，當模擬運行時，讓我們玩一下物理：</p>
<p>實作 #6：通過按住 Alt + 左鍵單擊 + 拖動來對機器人施加力（在某些 Mac 鍵盤上使用 ⌥ Option 鍵）。在 Linux 上，您還應該按住 Ctrl 鍵，此外還有 Alt + 左鍵單擊 + 拖動。無法對 WoodenBox 節點施加力，因為默認情況下，它們沒有質量並被認為是粘在地板上的。要在 WoodenBox 節點上啟用物理，您應將其質量字段設置為某個值（例如 0.2 公斤）。一旦完成，應該也可以對它們施加力。</p>
<p>模擬可以暫停、逐步運行、實時運行或快速運行。</p>
<p>現在我們將修改世界並減少物理模擬的步長：這將提高模擬的準確性和穩定性（但會降低最大模擬速度）。</p>
<p>實作 #7：暫停模擬並恢復它。在場景樹視圖中，展開 WorldInfo 節點（第一個節點）。將其 basicTimeStep 字段設置為 16。然後保存模擬。</p>
<p>創建新控制器 我們現在將編寫一個簡單的控制器，使機器人向前移動。</p>
<p>控制器是一個定義機器人行為的程序。Webots 控制器可以用以下編程語言編寫：C、C++、Java、Python、MATLAB 等。C、C++ 和 Java 控制器需要在運行前編譯。Python 和 MATLAB 控制器是解釋型語言，因此它們將無需編譯即可運行。在本教程中，我們將使用 C 作為參考語言，但所有代碼片段也可用於 C++、Java、Python 和 MATLAB。請參閱語言章節以設置使用不同編程語言的控制器。</p>
<p>Robot 節點的 controller 字段指定當前與機器人關聯的控制器。請注意，相同的控制器可以由多個機器人使用，但一個機器人一次只能使用一個控制器。每個控制器在通常由 Webots 生成的單獨子進程中執行。由於它們是獨立的進程，因此控制器不共享相同的地址空間，並且可以在不同的處理器核心上運行。</p>
<p>實作 #8：使用 文件 / 新建 / 新建機器人控制器... 菜單項目創建一個名為 epuck_go_forward（對於 C++ 和 Java，請稱其為 EPuckGoForward）的新 C（或其他語言）控制器。這將在 my_first_simulation/controllers 中創建一個新的 epuck_go_forward（或 EPuckGoForward）目錄。選擇選項以在文本編輯器中打開源文件。</p>
<p>新的源文件顯示在 Webots 文本編輯器窗口中。該源文件可以在無需修改的情況下編譯（如果是用 C、C++ 或 Java 編寫的），但當前代碼沒有實際效果。我們現在將新的 epuck_go_forward（或 EPuckGoForward）控制器與 E-puck 節點關聯。</p>
<p>CC++PythonJavaMATLAB 實作 #9：在場景樹視圖中，選擇 E-puck 節點的 controller 字段，然後使用場景樹視圖底部的字段編輯器：按選擇... 按鈕，然後在列表中選擇 epuck_go_forward。一旦控制器與機器人關聯，請保存世界。通過插入 include 語句（#include &lt;webots/motor.h&gt;）、獲取電機設備（WbDeviceTag motor = wb_robot_get_device("motor_name");）並應用電機命令（wb_motor_set_position(motor, 10);）來修改程序：</p>
<figure class="CodeBlock-module__container--BRsgk CodeBlock-module__immersive--vxBb6">
<figcaption class="CodeBlock-module__header--RMUQr"><span class="LanguageDot-module__languageDot--h8s9C"></span><span class="CodeBlock-module__languageName--ZLWCa">C</span></figcaption>
<div class="CodeBlock-module__copyContainer--HAOPj">
<div class="CodeBlock-module__copyContent--RfUYZ">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#include &lt;webots/robot.h&gt;

// 添加了一個新的 include 文件
#include &lt;webots/motor.h&gt;

#define TIME_STEP 64

int main(int argc, char **argv) {
 wb_robot_init();

 // 獲取電機設備
 WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
 WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
 // 設置電機的目標位置
 wb_motor_set_position(left_motor, 10.0);
 wb_motor_set_position(right_motor, 10.0);

 while (wb_robot_step(TIME_STEP) != -1);

 wb_robot_cleanup();

 return 0;
}</pre>
</div>
</div>
</figure>
<p>保存修改過的源代碼（文件 / 保存文本文件），並編譯它（構建 / 構建）。如果有必要，修復任何編譯錯誤。當 Webots 提出重置或重新加載世界時，選擇重置並運行模擬。</p>
<p>如果一切正常，您的機器人應該會向前移動。機器人將以最大速度移動一段時間，然後在車輪旋轉 10 弧度後停止。</p>
<p>在項目的 controllers 目錄中，已創建了一個包含 epuck_go_forward（或 EPuckGoForward）控制器的目錄。epuck_go_forward（或 EPuckGoForward）目錄包含一個在控制器編譯後生成的 epuck_go_forward（或 EPuckGoForward）二進制文件（在 Windows 上，此文件具有 .exe 擴展名）。控制器目錄名稱應與二進制名稱匹配。</p>
<p>擴展控制器以進行速度控制 機器人的輪子通常使用速度控制，而不是我們在上一個示例中使用的位置控制。為了以速度控制輪子的電機，您需要將目標位置設置為無限大並設置所需的速度：</p>
<p>CC++PythonJavaMATLAB 實作 #10：修改控制器程序如下所示，重新編譯並運行它：</p>
<figure class="CodeBlock-module__container--BRsgk CodeBlock-module__immersive--vxBb6">
<figcaption class="CodeBlock-module__header--RMUQr">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">C

#include &lt;webots/robot.h&gt;

// 添加了一個新的 include 文件
#include &lt;webots/motor.h&gt;

#define TIME_STEP 64

#define MAX_SPEED 6.28

int main(int argc, char **argv) {
  wb_robot_init();

  // 獲取電機的處理程序並將目標位置設置為無限大（速度控制）
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);

  // 以 MAX_SPEED 的 10% 設置電機速度。
  wb_motor_set_velocity(left_motor, 0.1 * MAX_SPEED);
  wb_motor_set_velocity(right_motor, 0.1 * MAX_SPEED);

  while (wb_robot_step(TIME_STEP) != -1) {
  }

  wb_robot_cleanup();

  return 0;
}</pre>
<br/><br/><span class="LanguageDot-module__languageDot--h8s9C"></span></figcaption>
</figure>
<p>機器人現在將移動（車輪將以每秒 0.2 弧度的速度旋轉）並且永遠不會停止。如果沒有發生任何事情，不要忘記通過選擇構建 / 構建菜單項或單擊代碼區域上方的齒輪圖標來編譯代碼。編譯錯誤以紅色顯示在控制台中。如果有任何錯誤，請修復它們並重試編譯。然後，重新加載世界。</p>
<p>結論 我們希望您喜歡創建您的第一個 Webots 模擬。您已經能夠設置一個世界，添加一個機器人並對其進行編程。重要的是您學習了以下基本概念：</p>
<p>一個世界由組織成樹結構的節點組成。 世界保存在存儲於 Webots 項目中的 .wbt 文件中。 項目還包含定義機器人行為的機器人控制器程序。 控制器可以用 C 或其他語言編寫。 C、C++ 和 Java 控制器必須顯式編譯才能運行。 控制器通過 Robot 節點的 controller 字段與機器人關聯。</p>
<p><strong>w7：清明節放假</strong></p><h2>w3</h2><h1>list</h1>
<p><a href="https://mdecd2025.github.io/hw-41023137/content/Brython.html?src=https://gist.githubusercontent.com/41023137/fff8d8095437ab9fc4a95d445cf2d251/raw/18c98d31267f38c19bc315b6ae4f9678337ff919/w1_hw_1">學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-41023137/content/Brython.html?src=https://gist.githubusercontent.com/41023137/71058c967835d818d7069eec4bf57706/raw/62d3eb91e0901e8a12dabcbfd33404d9bcbb56cb/w1_hw_2">分組網站與倉儲連結</a></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/y7w6chstaIc" width="560"></iframe></p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>